"""

    Steps template generator for `behave` acceptance tests

    Author: Tomas Mancal, Charles University, Prague, Czech Republic
    email: mancal@karlov.mff.cuni.cz


"""
import argparse
import datetime
import time
import os

import quantarhei as qr

from gherkin.token_scanner import TokenScanner
from gherkin.parser import Parser


def main():

    descr = 'Ghenerate, the Gherkin python step generator from Quantarhei'
    parser = argparse.ArgumentParser(
            description=descr+' ...')


    parser.add_argument("file", metavar='file', type=str, 
                         help='feature file to be processed', nargs='?')

    #
    # Generator options
    #
    parser.add_argument("-v", "--version", action="store_true",
                        help="shows Quantarhei package version")
    parser.add_argument("-i", "--info", action='store_true', 
                        help="shows detailed information about Quantarhei"+
                        " installation")
    parser.add_argument("-d", "--destination", type=str,  
                        help="specifies destination directory for the"+
                        " generated step file")
    

    #
    # Parsing all arguments
    #
    args = parser.parse_args()       

    #
    # show longer info
    #
    if args.info:
        qr.printlog("\n" 
                   +"ghenerate: Quantarhei Gherkin Python Step Generator\n",
                   verbose=True, loglevel=0)

        if not args.version:
            qr.printlog("Package version: ", qr.Manager().version, "\n",
                  verbose=True, loglevel=0)
        return
            
    #
    # show just Quantarhei version number
    #
    if args.version:
        qr.printlog("Quantarhei package version: ", qr.Manager().version, "\n",
                  verbose=True, loglevel=0)
        return

    if args.destination:
        ddir = args.destination
    else:
        ddir = "ghen"
        
    if args.file:
        
        print("")
        print(descr+" ...")
        
        filename = args.file 
        
    else:
        print("No file specified: quiting")
        return
    
    # FIXME: find out if the file has a .feature extension
    # FIXME: is it a feature file at all?
    with open(filename, 'r') as myfile:
      data = myfile.read()
    
    parser = Parser()
    feature_file = parser.parse(TokenScanner(data))
    
    # FIXME: should we iterate over more features in one file?
    children = feature_file["feature"]["children"]
    
    print("")
    print("Analyzing file: ", filename)
    print("Number of features: ", len(children))
    
    steps = children[0]["steps"]
    
    print("Number of steps in the feature: ", len(steps))
    
    print("Following steps found:")
    for step in steps:
       print("    ", step["keyword"], "\t :\t", step["text"])
    
    
    (filen, ext) = os.path.splitext(os.path.basename(filename))
    
    if not os.path.exists(ddir):
        os.makedirs(ddir)    
    ofile = os.path.join(ddir, filen+'.py')
    
    print("")
    print("Generating file: ", ofile)
    print("")
    
    ctm = time.time()
    tstamp = datetime.datetime.fromtimestamp(ctm).strftime('%Y-%m-%d %H:%M:%S')

    #FIXME: check existence (if in steps - do not overwrite)    
    if os.path.isfile(ofile):
        answr = input("file `"+ofile+"` exists. Overwrite? (y/n) [n]: ")
        if answr.strip() != "y":
            print("Your answer is `"+answr+"`")
            print("... aborting")
            return 1
        
    with open(ofile, 'w') as myfile:
        myfile.write(
'''"""

    Autogenerated by ghenerate script, part of Quantarhei
    http://github.com/tmancal74/quantarhei
    Tomas Mancal, tmancal74@gmai.com
    
    Generated on: {} 

    Edit the functions below to give them desired functionality.
    In present version of `ghenerate`, no edits or replacements
    are perfomed in the feature file text.


"""

from behave import *
'''.format(tstamp))                     
                   
        # FIXME: the 'text' should be searched for variables
        current = ""
        for step in steps:
            if ((step["keyword"].strip() == "Given")
                or (step["keyword"].strip() == "given")):
                myfile.write("\n\n#\n# Given ... \n#\n")
                myfile.write("@given('"+step["text"]+"')\n")
                myfile.write("def step_given(context):\n")
                myfile.write("    pass\n")
                current = "given"
            elif ((step["keyword"].strip() == "When")
                or (step["keyword"].strip() == "when")):
                myfile.write("\n\n#\n# When ...\n#\n")
                myfile.write("@when('"+step["text"]+"')\n")
                myfile.write("def step_when(context):\n")
                myfile.write("    pass\n")
                current = "when"
            elif ((step["keyword"].strip() == "Then")
                or (step["keyword"].strip() == "then")):
                myfile.write("\n\n#\n# Then ...\n#\n")
                myfile.write("@then('"+step["text"]+"')\n")
                myfile.write("def step_then(context):\n")
                myfile.write("    pass\n")
                current = "then"
            elif ((step["keyword"].strip() == "And")
                or (step["keyword"].strip() == "and")):
                if current == "":
                    raise Exception()
                myfile.write("\n\n#\n# And ...\n#\n")
                myfile.write("@"+current+"('"+step["text"]+"')\n")
                myfile.write("def step_"+current+"(context):\n")
                myfile.write("    pass\n")
            else:
                print("unknown keyword:", step["keyword"])
                
    print("... done")
    print("")
 








