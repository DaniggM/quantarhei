"""

    Autogenerated by ghenerate script, part of Quantarhei
    http://github.com/tmancal74/quantarhei
    Tomas Mancal, tmancal74@gmai.com

    Generated on: 2018-06-07 12:26:28

    Edit the functions below to give them desired functionality.
    In present version of `ghenerate`, no edits or replacements
    are perfomed in the feature file text.

"""

from behave import given
from behave import when
from behave import then

import quantarhei as qr

#
# Given ...
#
@given('that I have {N} TwoDSpectrum objects')
def step_given_1(context, N):
    """

        Given that I have {N} TwoDSpectrum objects

    """
    spectra = []
    ids = []
    
    for i_n in range(int(N)):
        spec = qr.TwoDSpectrum()
        itsid = id(spec)
        spectra.append(spec)
        ids.append(itsid)
        
    context.spectra = spectra
    context.ids = ids


#
# And ...
#
@given('I have an empty TwoDSpectrum container')
def step_given_2(context):
    """

        And I have an empty TwoDSpectrum container

    """
    container = qr.TwoDSpectrumContainer()
    context.container = container


#
# When ...
#
@when('I set the container to accept indexing by integers')
def step_when_3(context):
    """

        When I set the container to accept indexing by integers

    """
    cont = context.container
    
    cont.use_indexing_type("integer")


#
# And ...
#
@when('I add the spectra to the container one by one')
def step_when_4(context):
    """

        And I add the spectra to the container one by one

    """
    cont = context.container
    for spect in context.spectra:
        cont.set_spectrum(spect)


#
# Then ...
#
@then('TwoDSpectrum can be retrieved using the index {i}')
def step_then_5(context, i):
    """

        Then TwoDSpectrum can be retrieved using the index {i}

    """
    ids = context.ids
    cont = context.container
    
    length = len(ids)
    
    i_n = int(i)
    
    context.out_of_range = 0
    if i_n >= length:
        context.out_of_range = i_n
        return

    if not (ids[i_n] == id(cont.get_spectrum_by_index(i_n))):
        raise Exception("Incorrect retrieval of spectrum from container")


#
# But ...
#
@then('when index is out of bounds, I get an exception')
def step_then_6(context):
    """

        But when index is out of bounds, I get an exception

    """
    i_n = context.out_of_range
    if  i_n > 0:
        
        cont = context.container
        try:
            
            cont.get_spectrum_by_index(i_n)
            
        except KeyError as e:
            print(e, "'"+str(i_n)+"'")
            assert str(e) == "'"+str(i_n)+"'"
            
        except IndexError as e:
            print(e, "list index out of range")
            assert str(e) ==  "list index out of range"           
 
#
# And ...
#
@given('I have a ValueAxis of lenght {N} starting from zero with certain {step}')
def step_given_7(context, N, step):
    """

        And I have a ValueAxis of lenght {N} starting from zero with certain {step}

    """
    length = int(N)
    step = float(step)
    vaxis = qr.ValueAxis(0.0, length, step)
    
    context.vaxis = vaxis
    context.length = length
    context.step = step


#
# When ...
#
@when('I set the container to accept index by ValueAxis')
def step_when_8(context):
    """

        When I set the container to accept index by ValueAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    cont.use_indexing_type(vaxis)


#
# And ...
#
@when('I add the spectra to the container using values from ValueAxis')
def step_when_9(context):
    """

        And I add the spectra to the container using values from ValueAxis

    """
    cont = context.container
    spectra = context.spectra
    
    i_n = 0
    for val in context.vaxis.data:
        cont.set_spectrum(spectra[i_n], tag=val)
        i_n += 1
        


#
# Then ...
#
@then('TwoDSpectrum can be retrieved using values {val} from ValueAxis')
def step_then_10(context, val):
    """

        Then TwoDSpectrum can be retrieved using values {val} from ValueAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    context.out_of_range = 0
    
    vmax = vaxis.max
    
    if (float(val) < vmax):

        cont.get_spectrum(float(val))

    else:

        context.out_of_range=float(val)
        


#
# But ...
#
@then('when values are out of bounds, I get an exception')
def step_then_11(context):
    """

        But when values are out of bounds, I get an exception

    """
    val = context.out_of_range
    
    if val > 0:

        cont = context.container
        try:
            
            cont.get_spectrum(val)
            
        except Exception as e:
            assert str(e) == "Tag not compatible with the ValueAxis"        
        
#
# And ...
#
@given('I have a TimeAxis of lenght {N} starting from zero with certain {step}')
def step_given_12(context, N, step):
    """

        And I have a TimeAxis of lenght {N} starting from zero with certain {step}

    """
    length = int(N)
    step = float(step)
    vaxis = qr.TimeAxis(0.0, length, step)
    
    context.vaxis = vaxis
    context.length = length
    context.step = step

#
# When ...
#
@when('I set the container to accept index by TimeAxis')
def step_when_13(context):
    """

        When I set the container to accept index by TimeAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    cont.use_indexing_type(vaxis)


#
# And ...
#
@when('I add the spectra to the container using values from TimeAxis')
def step_when_14(context):
    """

        And I add the spectra to the container using values from TimeAxis

    """
    cont = context.container
    spectra = context.spectra
    
    i_n = 0
    for val in context.vaxis.data:
        cont.set_spectrum(spectra[i_n], tag=val)
        i_n += 1


#
# Then ...
#
@then('TwoDSpectrum can be retrieved using values {val} from TimeAxis')
def step_then_15(context, val):
    """

        Then TwoDSpectrum can be retrieved using values {val} from TimeAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    context.out_of_range = 0
    
    vmax = vaxis.max
    
    if (float(val) < vmax):

        cont.get_spectrum(float(val))

    else:

        context.out_of_range=float(val)

#
# And ...
#
@given('I have a FrequencyAxis of lenght {N} starting from zero with certain {step}')
def step_given_16(context, N, step):
    """

        And I have a FrequencyAxis of lenght {N} starting from zero with certain {step}

    """
    length = int(N)
    step = float(step)
    vaxis = qr.FrequencyAxis(0.0, length, step)
    
    context.vaxis = vaxis
    context.length = length
    context.step = step


#
# When ...
#
@when('I set the container to accept index by FrequencyAxis')
def step_when_17(context):
    """

        When I set the container to accept index by FrequencyAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    cont.use_indexing_type(vaxis)


#
# And ...
#
@when('I add the spectra to the container using values from FrequencyAxis')
def step_when_18(context):
    """

        And I add the spectra to the container using values from FrequencyAxis

    """
    cont = context.container
    spectra = context.spectra
    
    i_n = 0
    for val in context.vaxis.data:
        cont.set_spectrum(spectra[i_n], tag=val)
        i_n += 1


#
# Then ...
#
@then('TwoDSpectrum can be retrieved using values {val} from FrequencyAxis')
def step_then_19(context, val):
    """

        Then TwoDSpectrum can be retrieved using values {val} from FrequencyAxis

    """
    cont = context.container
    vaxis = context.vaxis
    
    context.out_of_range = 0
    
    vmax = vaxis.max
    
    if (float(val) < vmax):

        cont.get_spectrum(float(val))

    else:

        context.out_of_range=float(val)

          