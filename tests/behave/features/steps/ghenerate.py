"""

    Autogenerated by ghenerate script, part of Quantarhei
    http://github.com/tmancal74/quantarhei
    Tomas Mancal, tmancal74@gmai.com

    Generated on: 2018-06-04 13:53:49

    Edit the functions below to give them desired functionality.
    In present version of `ghenerate`, no edits or replacements
    are perfomed in the feature file text.

"""

from behave import *


#
# Given ... 
#
@given('that Quantarhei is installed')
def step_given(context):
    
    # if this does not break, quantarhei is installed
    import quantarhei as qr
    assert isinstance(qr.Manager().version, str)


#
# When ...
#
@when('I run the ghenerate script')
def step_when(context):
    from subprocess import check_output

    output = check_output("ghenerate")
    context.output = output


#
# Then ...
#
@then('I get a simple usage message')
def step_then(context):
    import re

    res = re.search("No file specified: quiting\nusage:", 
                    context.output.decode('utf-8'))
    if res is None:
        print(context.output.decode('utf-8'))
        raise Exception("No usage message returned")


def secure_temp_dir(context):
    import os
    import tempfile
    
    tmpd = tempfile.TemporaryDirectory()
    
    context.tempdir = tmpd
    context.cwd = os.getcwd()   


def cleanup_temp_dir(context):
    import os
    os.chdir(context.cwd)
    context.tempdir.cleanup()


def fetch_test_feature_file(context, filename):
    import os
    import os.path
    import shutil
    
    os.chdir(context.tempdir.name)
    shutil.copyfile(os.path.join(context.cwd, "qrhei.feature"), 
                    os.path.join(".", filename))
    os.chdir(context.cwd)
    
    
    
#
# And ...
#
@given('current directory contains a feature file')
def step_given(context):
    from subprocess import check_output
    import re
    import os
    
    secure_temp_dir(context)
    
    
    ffile = "test.feature"
    fetch_test_feature_file(context, ffile)
    
    os.chdir(context.tempdir.name)
    output = check_output(["ls", "-l"]).decode("utf-8")
    os.chdir(context.cwd)
    res = re.search(ffile, output)
    
    if res is None:
        cleanup_temp_dir(context)
        raise Exception("Feature file: "+ffile+" not found")


#
# And ...
#
@given('the default destination directory exists')
def step_given(context):
    from pathlib import Path
    import os.path
    
    path = os.path.join(context.tempdir.name, "ghen")
    
    my_file = Path(path)
    if not my_file.exists():
        my_file.mkdir()
        
    assert my_file.is_dir()


#
# When ...
#
@when('I run the ghenerate script with the name of the feature file')
def step_when(context):
    from subprocess import check_output
    from subprocess import call
    import os
    
    #print(os.getcwd())
    #print(check_output(["ls", "-la"]).decode("utf-8"))
    #print(check_output(["ls", "-la", "ghen"]).decode("utf-8"))
    os.chdir(context.tempdir.name)
    call(["ghenerate", "test.feature"])
    print(check_output(["ls", "-la", "ghen"]).decode("utf-8"))
    os.chdir(context.cwd)

#
# Then ...
#
@then('feature file is converted into a Python step file')
def step_then(context):
    # this will remain empty, there is no way how this can be checked
    pass

 
#
# And ...
#
@then('the step file is saved into default destination directory')
def step_then(context):
    from subprocess import check_output
    import re
    import os
      
    os.chdir(context.tempdir.name)
    output = check_output(["ls", "ghen"])
    os.chdir(context.cwd)
    
    if re.search("test.py", output.decode()) is None:
        cleanup_temp_dir(context)
        raise Exception()
        

#
# And ...
#
@given('{destination_directory} exists')
def step_given(context, destination_directory):
    from pathlib import Path
    import os
    
    os.chdir(context.tempdir.name)
    
    my_file = Path(destination_directory)
    my_file.mkdir()
    
    if not my_file.is_dir():
        cleanup_temp_dir(context)
        raise Exception()

    os.chdir(context.cwd)

#
# When ...
#
@when('I run {ghenerate_command} with the option specifying destination directory')
def step_when(context, ghenerate_command):
    from subprocess import check_output
    from subprocess import call
    import os
    
    os.chdir(context.tempdir.name)
    
    try:
        call(["ls", "-la"])
        gh = ghenerate_command.split()
        gh.append("test.feature")
        
        print(">>>", gh)
        output = check_output(gh)
        print(output.decode("utf-8"))

    except:
        cleanup_temp_dir(context)
        raise Exception("Command failed")
    
    #context.output = output
    os.chdir(context.cwd)    

#
# And ...
#
@then('step file is saved into the destination directory')
def step_then(context):

    
    cleanup_temp_dir(context)
    


#
# And ...
#
@given('the {destination_directory} does not exist')
def step_given(context, destination_directory):
    pass


#
# When ...
#
@when('I run {ghenerate_command} with feature file name')
def step_when(context, ghenerate_command):
    pass


#
# Then ...
#
@then('destination directory is created')
def step_then(context):
    pass


#
# And ...
#
@then('step file is saved to the destination directory')
def step_then(context):
    cleanup_temp_dir(context)
