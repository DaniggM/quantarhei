"""

    Autogenerated by ghenerate script, part of Quantarhei
    http://github.com/tmancal74/quantarhei
    Tomas Mancal, tmancal74@gmai.com

    Generated on: 2018-06-11 09:20:58

    Edit the functions below to give them desired functionality.
    In present version of `ghenerate`, no edits or replacements
    are perfomed in the feature file text.

"""
import numpy

from behave import given
from behave import when
from behave import then

import quantarhei as qr


def _spectrum(a, b):
    
    def func(x, y, a, b):
    
        Delta = b
        #omega = 2.0*3.14159/20.0 
        
        data = numpy.zeros((len(x), len(y)))
        
        for i_x in range(len(x)):
                data[i_x, :] = a*numpy.exp(-(x[i_x]/Delta)**2)* \
                                 numpy.exp(-(y/Delta)**2)
                data[i_x, :] -= (a/2.0)*numpy.exp(-(x[i_x]/Delta)**2)* \
                                 numpy.exp(-((y-Delta)/Delta)**2)
        
        return data

    xrange = qr.ValueAxis(-50.0, 100, 1.0)
    yrange = qr.ValueAxis(-50.0, 100, 1.0)
    
    data = func(xrange.data, yrange.data, a, b)
    
    return (xrange, yrange, data)


#
# Given ...
#
@given('that I have data corresponding to individual liouville pathways in 2D spectrum')
def step_given_1(context):
    """

        Given that I have data corresponding to individual liouville pathways in 2D spectrum

    """
    
    data_list = []
    para_list = [[1.0, 10.0], [2.0, 20.0], [0.5, 12.0],
                 [0.1, 16.0], [0.2, 8.9], [0.3, 9.0]]
    types = ["R1f", "R2g", "R3g", "R3g", "R1f", "R2g"]
    tags  = ["r1f1", "r2g1", "r3g1", "r3g2", "r1f2", "r2g2"]


    for pars in para_list:
        data_list.append(_spectrum(pars[0], pars[1]))
        
        
    context.data_list = data_list
    context.types = types
    context.tags = tags
    


#
# When ...
#
@when('I create a new TwoDSpectrum object')
def step_when_2(context):
    """

        When I create a new TwoDSpectrum object

    """
    context.twod = qr.TwoDSpectrum()


#
# Then ...
#
@then('I can save 2D data using type and tag')
def step_then_3(context):
    """

        Then I can save 2D data using type and tag

    """
    twod = context.twod
    
    data_list = context.data_list
    types = context.types
    tags = context.tags
    
    k_l = 0
    for data in data_list:
        tpp = types[k_l]
        tag = tags[k_l]
        
        twod._add_data(data, dtype=tpp, tag=tag)
        
        k_l += 1
        


#
# And ...
#
@then('I can retrieve spectra by tag')
def step_then_4(context):
    """

        And I can retrieve spectra by tag

    """
    pass


#
# And ...
#
@then('I can retrieve sum of spectra of a given type {type}')
def step_then_5(context, type):
    """

        And I can retrieve sum of spectra of a given type {type}

    """
    pass


#
# And ...
#
@then('I can retrieve sum of spectra of a given process {process}')
def step_then_6(context, process):
    """

        And I can retrieve sum of spectra of a given process {process}

    """
    pass


#
# And ...
#
@then('I can retrieve sum of spectra of a given signal {signal}')
def step_then_7(context, signal):
    """

        And I can retrieve sum of spectra of a given signal {signal}

    """
    pass
