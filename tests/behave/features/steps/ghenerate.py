"""

    Autogenerated by ghenerate script, part of Quantarhei
    http://github.com/tmancal74/quantarhei
    Tomas Mancal, tmancal74@gmai.com

    Generated on: 2018-06-04 13:53:49

    Edit the functions below to give them desired functionality.
    In present version of `ghenerate`, no edits or replacements
    are perfomed in the feature file text.

"""
import os
import tempfile
import shutil
import re

from subprocess import check_output
from subprocess import call

from behave import *


#
# Given ... 
#
@given('that Quantarhei is installed')
def step_given(context):
    
    # if this does not break, quantarhei is installed
    import quantarhei as qr
    assert isinstance(qr.Manager().version, str)


#
# When ...
#
@when('I run the ghenerate script')
def step_when(context):
    from subprocess import check_output

    output = check_output("ghenerate")
    context.output = output


#
# Then ...
#
@then('I get a simple usage message')
def step_then(context):
    import re

    res = re.search("No file specified: quiting\nusage:", 
                    context.output.decode('utf-8'))
    if res is None:
        print(context.output.decode('utf-8'))
        raise Exception("No usage message returned")


def secure_temp_dir(context):
    """Creates temporary directory and stores its info into context
    
    """
    tmpd = tempfile.TemporaryDirectory()
    context.tempdir = tmpd


def cleanup_temp_dir(context):
    """Cleans up temporary directory
    
    
    """
    
    try:
        os.chdir(context.cwd)
    except:
        print("Current working file record does not exist")
        
    try:
        context.tempdir.cleanup()
    except:
        print("Temporary directory cannot be cleaned up - does it exist?")
        

def fetch_test_feature_file(context, filename):
    """Fetches the file with a given name from the storage of test files
    
    """
    
    # right now, the storage is in the directory from which we start
    source_dir = context.cwd
    
    # copy the file to current directory
    shutil.copyfile(os.path.join(source_dir, "qrhei.feature"), 
                    os.path.join(os.getcwd(), filename))


class testdir():
    """Context manager for test directory
    
    With this context manager we enter temporary directory which was
    prepared in the startup phase of the test. The context manager makes sure
    that when tests fail the temporary directory is properly cleaned up.

    """
    
    def __init__(self, context):
        
        self.context = context
        try:
            tempdir = context.tempdir
            if tempdir is None:
                raise Exception()
        except:
            raise Exception("Context does not contain info about tempdir")


    def __enter__(self):
        self.context.cwd = os.getcwd()
        os.chdir(self.context.tempdir.name)

    def __exit__(self,  exc_type, exc_value, traceback):
        os.chdir(self.context.cwd)
        if exc_type is not None:
            cleanup_temp_dir(self.context)

    
#
# And ...
#
@given('current directory contains a feature file')
def step_given(context):
    
    secure_temp_dir(context)
    
    with testdir(context):
        ffile = "test.feature"
        fetch_test_feature_file(context, ffile)
    
        output = check_output(["ls", "-l"]).decode("utf-8")
        res = re.search(ffile, output)
    
        if res is None:  
            raise Exception("Feature file: "+ffile+" not found")


#
# And ...
#
@given('the default destination directory exists')
def step_given(context):
    from pathlib import Path

    with testdir(context):    
    
        path = os.path.join(context.tempdir.name, "ghen")    
        my_file = Path(path)
        if not my_file.exists():
            my_file.mkdir()
        
        if not my_file.is_dir():
            raise Exception("Defailt destination directory does not exist.")


#
# When ...
#
@when('I run the ghenerate script with the name of the feature file')
def step_when(context):

    with testdir(context):    
        #print(os.getcwd())
        #print(check_output(["ls", "-la"]).decode("utf-8"))
        #print(check_output(["ls", "-la", "ghen"]).decode("utf-8"))
        call("ghenerate test.feature", shell=True, 
             cwd=context.tempdir.name)
        print(check_output(["ls", "-la", "ghen"]).decode("utf-8"))


#
# Then ...
#
@then('feature file is converted into a Python step file')
def step_then(context):
    # this will remain empty, there is no way how this can be checked
    pass

 
#
# And ...
#
@then('the step file is saved into default destination directory')
def step_then(context):
      
    with testdir(context):
        output = check_output("ls ghen", shell=True)
    
        if re.search("test.py", output.decode()) is None:
            raise Exception("step file not found")
        

#
# And ...
#
@given('{destination_directory} exists')
def step_given(context, destination_directory):
    from pathlib import Path

    with testdir(context):
        
        my_file = Path(destination_directory)
        my_file.mkdir()
    
        if not my_file.is_dir():
            raise Exception("Destination directory "+destination_directory+
                            " does not exist")


#
# When ...
#
@when('I run {ghenerate_command} with the option specifying destination directory')
def step_when(context, ghenerate_command):
    
    with testdir(context):
    
        try:
            call(["ls", "-la"])
            
#            cmd = ghenerate_command.split()
#            
#            gh = [cmd[0]]
#            cmd.remove(cmd[0])
#            
#            sp = " "
#            arg = sp.join(cmd)
#            gh.append(arg)
#            gh.append("test.feature")
            
            gh = ghenerate_command+" "+"test.feature"
            print(">>> ", gh)
            output = check_output(gh, shell=True, cwd=os.getcwd())
            print(output.decode("utf-8"))
    
        except:
            raise Exception("Command failed")   


#
# And ...
#
@then('step file is saved into the destination directory')
def step_then(context):
    cleanup_temp_dir(context)
    


#
# And ...
#
@given('the {destination_directory} does not exist')
def step_given(context, destination_directory):
    pass


#
# When ...
#
@when('I run {ghenerate_command} with feature file name')
def step_when(context, ghenerate_command):
    pass


#
# Then ...
#
@then('destination directory is created')
def step_then(context):
    pass


#
# And ...
#
@then('step file is saved to the destination directory')
def step_then(context):
    cleanup_temp_dir(context)
